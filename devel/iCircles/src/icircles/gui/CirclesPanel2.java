/*
 *   Project: iCircles
 * 
 * File name: CirclesPanel2.java
 *    Author: Matej Urbas [matej.urbas@gmail.com]
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package icircles.gui;

import icircles.concreteDiagram.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import javax.swing.event.MouseInputListener;

/**
 * This panel takes a {@link ConcreteDiagram concrete diagram} and draws it.
 *
 * @author Matej Urbas [matej.urbas@gmail.com]
 */
public class CirclesPanel2 extends javax.swing.JPanel {

    // <editor-fold defaultstate="collapsed" desc="Private Fields">
    /**
     * This flag indicates whether mouse interaction with this circles panel is
     * enabled. <p>Is this flag is set to {@code true} then the diagram elements
     * will be highlighted if the user hovers the mouse over them, and also the
     * user will be able to click on particular elements in the diagram, which
     * will invoke a {@link DiagramClickListener diagram interaction event}.</p>
     */
    private boolean interactionEnabled = false;
    /**
     * The diagram that will actually be drawn in this panel.
     */
    private ConcreteDiagram diagram;
    /**
     * The scale that should be applied to the circles in this diagram (due to
     * the resizing of this panel).
     */
    private double scaleFactor = 1;
    private AffineTransform trans = new AffineTransform();
    /**
     * This stroke is used to draw contours if no special stroke is specified
     * for them.
     */
    private static final BasicStroke DEFAULT_CONTOUR_STROKE = new BasicStroke(2);
    /**
     * This stroke is used to draw highlighted lines and contours.
     */
    private static final BasicStroke HIGHLIGHT_STROKE = new BasicStroke(3);
    private static final Color HIGHLIGHT_STROKE_COLOUR = Color.BLUE;
    private static final Color HIGHLIGHTED_FOOT_COLOUR = Color.RED;
    private Shape highlightedOutline = null;
    private Area highlightedArea = null;
    private ConcreteSpider highlightedSpider = null;
    private ConcreteSpiderFoot highlightedFoot;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Constructor">
    /**
     * Creates new panel that will draw the given diagram.
     *
     * @param diagram the diagram to be drawn by this panel.
     */
    public CirclesPanel2(ConcreteDiagram diagram) {
        initComponents();
        resetDiagram(diagram);
        resizeContents();
        // Register mouse listeners
        CirclesPanelMouseHandler mouseHandler = new CirclesPanelMouseHandler();
        addMouseListener(mouseHandler);
        addMouseMotionListener(mouseHandler);
    }

    /**
     * Creates new panel with no diagram.
     */
    public CirclesPanel2() {
        this(null);
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Public Properties">
    /**
     * Sets the diagram that should be displayed by this panel.
     *
     * @param diagram the diagram that should be displayed by this panel.
     */
    public void setDiagram(ConcreteDiagram diagram) {
        if (this.diagram != diagram) {
            resetDiagram(diagram);
        }
    }

    /**
     * This flag indicates whether mouse interaction with this circles panel is
     * enabled. <p>Is this flag is set to {@code true} then the diagram elements
     * will be highlighted if the user hovers the mouse over them, and also the
     * user will be able to click on particular elements in the diagram, which
     * will invoke a {@link DiagramClickListener diagram interaction event}.</p>
     *
     * @return {@code true} if and only if the mouse interaction is enabled.
     */
    public boolean isInteractionEnabled() {
        return interactionEnabled;
    }

    /**
     * This flag indicates whether mouse interaction with this circles panel is
     * enabled. <p>Is this flag is set to {@code true} then the diagram elements
     * will be highlighted if the user hovers the mouse over them, and also the
     * user will be able to click on particular elements in the diagram, which
     * will invoke a {@link DiagramClickListener diagram interaction event}.</p>
     *
     * @param interactionEnabled the new value to which to set the flag.
     */
    public void setInteractionEnabled(boolean interactionEnabled) {
        this.interactionEnabled = interactionEnabled;
    }

    /**
     * Gets the diagram that is currently being displayed by this panel.
     *
     * @return the diagram that is currently being displayed by this panel.
     */
    public ConcreteDiagram getDiagram() {
        return diagram;
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Private Properties">
    public Area getHighlightedArea() {
        return highlightedArea;
    }

    public void setHighlightedArea(Area highlightedArea) {
        if (this.highlightedArea != highlightedArea) {
            setHighlightedOutline(null);
            setHighlightedSpider(null, null);
            repaintShape(this.highlightedArea);
            this.highlightedArea = highlightedArea;
            repaintShape(this.highlightedArea);
        }
    }

    public Shape getHighlightedOutline() {
        return highlightedOutline;
    }

    public void setHighlightedOutline(Shape highlightedOutline) {
        if (this.highlightedOutline != highlightedOutline) {
            setHighlightedArea(null);
            setHighlightedSpider(null, null);
            repaintShape(this.highlightedOutline);
            this.highlightedOutline = highlightedOutline;
            repaintShape(this.highlightedOutline);
        }
    }

    public ConcreteSpider getHighlightedSpider() {
        return highlightedSpider;
    }

    public void setHighlightedSpider(ConcreteSpider spider, ConcreteSpiderFoot foot) {
        if (this.highlightedSpider != spider || this.highlightedFoot != foot) {
            setHighlightedArea(null);
            setHighlightedOutline(null);
            this.highlightedSpider = spider;
            this.highlightedFoot = foot;
            repaint();
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Overrides">
    @Override
    public void paint(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        if (diagram == null) {
            this.setBackground(Color.red);
            super.paint(g);
        } else {
            // draw the diagram
            super.paint(g);

            // This centers the diagram onto the drawing area.
            g.translate(getCenteringTranslationX(), getCenteringTranslationY());

            // shaded zones
            g.setColor(Color.lightGray);
            ArrayList<ConcreteZone> zones = diagram.getShadedZones();
            for (ConcreteZone z : zones) {
                if (z.getColor() != null) {
                    g.setColor(z.getColor());
                } else {
                    g.setColor(Color.lightGray);
                }

                // TODO: The box of the diagram should not change. Put the box
                // into the constructor? NOTE: It would not add much to execution
                // speed. The 'getShape' function already caches the calculated
                // shape.
                Area a = z.getShape(diagram.getBox());
                g2d.fill(a.createTransformedArea(trans));
            }
            g2d.setStroke(DEFAULT_CONTOUR_STROKE);
            ArrayList<CircleContour> circles = diagram.getCircles();
            Ellipse2D.Double tmpCircle = new Ellipse2D.Double();
            for (CircleContour cc : circles) {
                Color col = cc.color();
                if (col == null) {
                    col = Color.black;
                }
                g.setColor(col);
                scaleCircle(scaleFactor, cc.getCircle(), tmpCircle);
                g2d.draw(tmpCircle);
                if (cc.ac.getLabel() == null) {
                    continue;
                }
                g.setColor(col);
                if (cc.stroke() != null) {
                    g2d.setStroke(cc.stroke());
                } else {
                    g2d.setStroke(DEFAULT_CONTOUR_STROKE);
                }
                // TODO a proper way to place labels - it can't be a method in CircleContour,
                // we need the context in the ConcreteDiagram
                Font f = diagram.getFont();
                if (f != null) {
                    g2d.setFont(f);
                }
                /*
                 * //TODO: g2d.getFontMetrics(); // for a string??? // use the
                 * font metrics to adjust the anchor position
                 *
                 * JLabel jl = new JLabel("IGI"); jl.setFont(font);
                 * jl.getWidth(); jl.getHeight(); jl.setLocation(arg0, arg1);
                 */

                g2d.drawString(cc.ac.getLabel().getLabel(),
                        (int) (cc.getLabelXPosition() * trans.getScaleX()),
                        (int) (cc.getLabelYPosition() * trans.getScaleY()));
            }
            g.setColor(Color.black);
            for (ConcreteSpider s : diagram.getSpiders()) {
                // Reset the stroke and the colour if the spider is highlighted.
                Color oldColor = null;
                Stroke oldStroke = null;
                if (highlightedSpider == s) {
                    oldColor = g2d.getColor();
                    g2d.setColor(HIGHLIGHT_STROKE_COLOUR);
                    oldStroke = g2d.getStroke();
                    g2d.setStroke(HIGHLIGHT_STROKE);
                }
                
                for (ConcreteSpiderLeg leg : s.legs) {

                    g2d.drawLine(
                            (int) (leg.from.x * scaleFactor),
                            (int) (leg.from.y * scaleFactor),
                            (int) (leg.to.x * scaleFactor),
                            (int) (leg.to.y * scaleFactor));
                }

                for (ConcreteSpiderFoot foot : s.feet) {
                    foot.getBlob(tmpCircle);
                    Color oldColor2 = g2d.getColor();
                    scaleCircle(scaleFactor, tmpCircle, tmpCircle);
                    if (highlightedFoot == foot) {
                        oldColor2 = g2d.getColor();
                        g2d.setColor(HIGHLIGHTED_FOOT_COLOUR);
                        tmpCircle.x -= tmpCircle.width * 0.1;
                        tmpCircle.y -= tmpCircle.height * 0.1;
                        tmpCircle.width *= 1.2;
                        tmpCircle.height *= 1.2;
                    }
                    g2d.fill(tmpCircle);
                    if (highlightedFoot == foot) {
                        g2d.setColor(oldColor2);
                    }
                }
                if (s.as.get_name() == null) {
                    continue;
                }
                // TODO a proper way to place labels - it can't be a method in ConcreteSpider,
                // we need the context in the ConcreteDiagram
                g2d.drawString(s.as.get_name(),
                        (int) ((s.feet.get(0).x + 5) * trans.getScaleX()),
                        (int) ((s.feet.get(0).y - 5) * trans.getScaleY()));

                // Reset the stroke and colour appropriatelly.
                if (highlightedSpider == s) {
                    g2d.setColor(oldColor);
                    g2d.setStroke(oldStroke);
                }
            }
        }
    }

    @Override
    public void setBounds(int x, int y, int width, int height) {
        super.setBounds(x, y, width, height);
        resizeContents();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Private methods">
    /**
     * This method sets the given diagram as the one to be displayed. <p>It
     * refreshes the {@link CirclesPanel2#setPreferredSize(java.awt.Dimension)
     * preferred size} of this panel and requests a refresh of the drawing area
     * accordingly.</p>
     *
     * @param diagram
     */
    private void resetDiagram(ConcreteDiagram diagram) {
        this.diagram = diagram;
        if (diagram == null) {
            // NOTE: Currently we display nothing if there is no diagram
            this.setPreferredSize(null);
        } else {
            this.setPreferredSize(new Dimension(diagram.getSize(), diagram.getSize()));
        }
        // We have to redraw the entire area...
        resizeContents();
    }

    private void resizeContents() {
        if (diagram != null) {
            // Get the current width of this diagram panel and resize contents...
            int size = diagram.getSize();
            if (size > 0) {
                setScaleFactor(Math.min((float) this.getWidth() / size, (float) this.getHeight() / size));
            }
        }
    }

    /**
     * Sets the scale factor of the drawn contents to the new value. <p>This
     * merely scales the drawn contents (without affecting the thickness of
     * curves, size of spiders or fonts).</p> <p>Note: this method does not
     * change the size of the panel (not even the preferred size).</p>
     *
     * @param newScaleFactor the new factor by which to scale the drawn
     * contents.
     */
    private void setScaleFactor(double newScaleFactor) {
        scaleFactor = newScaleFactor;
        recalculateTransform();
        repaint();
    }

    /**
     * Compares the width and height of this panel and tries to scale the
     * concrete diagram's box so that it nicely fits the contents of the panel.
     */
    private void recalculateTransform() {
        this.trans.setToScale(scaleFactor, scaleFactor);
    }

    /**
     * Puts the scaled coordinates, width and height of {@code inCircle} into
     * the {@code outCircle} (without changing {@code inCircle}).
     *
     * @param scaleFactor
     * @param inCircle
     * @param outCircle
     */
    private void scaleCircle(double scaleFactor, Ellipse2D.Double inCircle, Ellipse2D.Double outCircle) {
        outCircle.x = inCircle.x * scaleFactor;
        outCircle.y = inCircle.y * scaleFactor;
        outCircle.width = inCircle.width * scaleFactor;
        outCircle.height = inCircle.height * scaleFactor;
    }

    private void repaintShape(Shape shape) {
        if (shape != null) {
            repaint(shape.getBounds());
        }
    }

    private int getCenteringTranslationX() {
        return (this.getWidth() - (int) Math.round(diagram.getSize() * scaleFactor)) / 2;
    }

    private int getCenteringTranslationY() {
        return (this.getHeight() - (int) Math.round(diagram.getSize() * scaleFactor)) / 2;
    }
    // </editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Helper Classes">
    private class CirclesPanelMouseHandler implements MouseInputListener {

        public CirclesPanelMouseHandler() {
        }

        public void mouseClicked(MouseEvent e) {
            if (interactionEnabled) {
            }
        }

        public void mousePressed(MouseEvent e) {
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }

        public void mouseDragged(MouseEvent e) {
        }

        public void mouseMoved(MouseEvent e) {
            if (interactionEnabled) {
                Point p = transformPoint(e.getPoint());
                // TODO: Check if the mouse hovers over a contour:
                // Check if the mouse hovers over a spider:
                for (ConcreteSpider s : diagram.getSpiders()) {
                    for (ConcreteSpiderFoot f : s.feet) {
                        double dist = Math.sqrt((p.x - f.x) * (p.x - f.x)
                                + (p.y - f.y) * (p.y - f.y));
                        if (dist < ConcreteSpiderFoot.FOOT_RADIUS + 2) {
                            setHighlightedSpider(s, f);
                            return;
                        }
                    }
                }
                // TODO: Check if the mouse hovers over a zone:
                setHighlightedArea(null);
                setHighlightedOutline(null);
                setHighlightedSpider(null, null);
            }
        }

        private Point transformPoint(Point p) {
            p.x -= getCenteringTranslationX();
            p.x /= scaleFactor;
            p.y -= getCenteringTranslationY();
            p.y /= scaleFactor;
            return p;
        }
    }
    //</editor-fold>
}
